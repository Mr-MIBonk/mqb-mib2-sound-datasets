//------------------------------------------------
//--- 010 Editor v13.0 Binary Template
//
//      File: 0x003000.BIN
//   Authors: Alex Strelets
//   Version: 0.6
//   Purpose: Parse the contents of the MIB2 Sound Channels and Effects
//  Category:
// File Mask:
//  ID Bytes:
//   History: 0.1 - Initial version
//            0.2 - Limiters added
//            0.3 - MIB1 vs MIB2 data sync
//            0.5 - 'Sound Effects' table optimizations,
//                  renaming, refactoring, cleanup
//            0.5.1 -  THD max property found
//            0.6 - Delay value fixed, gain values fixed,
//                  special channel names added for 32 - 35 signal flows
//------------------------------------------------

BigEndian();

string getSignalflow(int type) {
    switch (type) {
        case 0x10: return "2 channels";
        case 0x20: return "4 channels";
        case 0x21: return "4 channels / 2 channels compatible";
        case 0x25: return "5 channels (5.0)";
        case 0x30: return "6 channels (5.1)";
        case 0x31: return "6 channels (5.1) / 4ch / 2ch compatible";
        case 0x32: return "6 channels (4.2)";
        case 0x33: return "6 channels (4.2) / 4ch / 2ch compatible";
        case 0x34: return "6 channels (4.0 bi-amping)";
        case 0x35: return "6 channels (4.0 bi-amping) / 4ch / 2ch compatible";
        default:   return "Unknown";
    }
}

string getFilterType(int type) {
    switch (type) {
        case 0x00: return "Bypass";
        case 0x01: return "High Shelf 1";
        case 0x02: return "High Shelf 2";
        case 0x03: return "Low Shelf 1 ";
        case 0x04: return "Low Shelf 2";
        case 0x05: return "Unknown"; // Should be "Notch" but not used
        case 0x06: return "Peak ";
        case 0x07: return "High Pass 1";
        case 0x08: return "High Pass 2";
        case 0x09: return "Low Pass 1";
        case 0x0A: return "Low Pass 2";
        case 0x10: return "Coefficients";
        default:   return "Unknown";
    }
}

typedef struct {
    ubyte type <bgcolor=cAqua, read=getFilterType>;
    ubyte quality <bgcolor=cLtGreen>;   // [0.2 .. 5]
    ushort frequency <bgcolor=cGreen>;  // [20 .. 20000]
    ubyte gainOffset <bgcolor=cDkAqua>; // [-6 .. +6]
    ubyte maxGain <bgcolor=cDkAqua>;    // [0  .. 15]
} EQ;

typedef struct {
    ubyte type <bgcolor=cAqua, read=getFilterType>;
    ubyte quality <bgcolor=cLtGreen>;
    ushort frequency <bgcolor=cGreen>;
    ubyte gain[19] <bgcolor=cDkAqua>;
} EQ2;

typedef struct (int length) {
    ubyte type <bgcolor=cAqua, read=getFilterType>;
    ubyte quality <bgcolor=cLtGreen>;
    ushort frequency <bgcolor=cGreen>;
    byte gain <bgcolor=cDkAqua>; // [-12.5 .. 12.5]
    ubyte coefficients[length] <bgcolor=cDkGray>;
} EQ3;

typedef struct {
    EQ3 Filter1(16);
    EQ3 Filter2(16);
    EQ3 Filter3(16);
    EQ3 Filter4(0);
    EQ3 Filter5(0);
    EQ3 Filter6(0);
    EQ3 Filter7(0);
    byte Gain <bgcolor=cLtYellow>;
    ubyte Delay <bgcolor=cYellow>;
    ubyte Phase <bgcolor=cDkYellow>;
} CarEQ;

float calcQuality (ubyte value) {
    return (float) value / 10;
}

float calcGain (byte value) {
    return (float) value / 20;
}

float calcAbsGain (ubyte value) {
    return (float) value / 20;
}

float calcMaxGain (ubyte value) {
    return (float) value / 15;
}

void printEQ2(EQ2 &s, string name) {
    Printf("\n%s", name);
    Printf("\nType    \tQ Factor\tFrequency\n");
    Printf("==================================\n");
    Printf("%-13s%7.1f\t %6gHz\n",
        getFilterType(s.type),
        calcQuality(s.quality),
        s.frequency);
    Printf("==================================\n");
    Printf("Gain:   \t");
    for (i = 0; i < 19; i++) {
        Printf("%5.2f ", calcAbsGain(s.gain[i]));
    }
    Printf("\n");
}

local string spacer = "\t\t\t";

void printEQFilter(EQ3 &filter, int index) {
    local string str = (index > 1 ? "\n" : spacer);
    Printf("%-13s  %5.1f\t  %6gHz\t    %5.2fdB %s",
        getFilterType(filter.type),
        calcQuality(filter.quality),
        filter.frequency,
        calcGain(filter.gain),
        str);
}

void printProfileName (int index) {
    Printf("[ CarEQ SoundEffects #%i ]                       %s", index, index > 1 ? "\n\n": spacer);
}

string getChannelName(int index, byte signalFlow) {
    if ((signalFlow == 0x32 || signalFlow == 0x33) && index == 5) {
        return "SUBWOOFER 2";
    } else if (signalFlow >= 0x34) {
        switch (index) {
            case 1: return "RIGHT_TWETR"; break;
            case 2: return "LEFT_TWEETR"; break;
            case 4: return "RIGHT_WOOFR"; break;
            case 5: return "LEFT_WOOFER"; break;
        }
    }

    switch (index) {
        case 0: return "REAR_RIGHT "; break;
        case 1: return "FRONT_RIGHT"; break;
        case 2: return "FRONT_LEFT "; break;
        case 3: return "REAR_LEFT  "; break;
        case 4: return "SUBWOOFER  "; break;
        case 5: return "CENTER     "; break;
    }
    return Str("CHANNEL_%i ", index+1);
}

string getEQBand(int index) {
    switch (index) {
        case 0: return "Bass      "; break;
        case 1: return "Mid-Bass  "; break;
        case 2: return "Middle    "; break;
        case 3: return "Mid-Treble"; break;
        case 4: return "Treble    "; break;
    }
    return Str("Band_%i ", index+1);
}

void printChannelHeader(CarEQ eq[], int index, int profileIndex) {
    local string str = (profileIndex > 1 ? "\n" : spacer);

    Printf("%s [ Gain: %-4.1f Delay: %-2.1fms Phase: %s ]%s",
        getChannelName(index, Signalflow),
        calcGain(eq[index].Gain),
        (float) eq[index].Delay / 10,
        (char) eq[index].Phase > 0 ? 'R' : '0',
        str);
}

void printLines() {
    local string str = "------------------------------------------------%s";
    Printf(str, spacer);
    Printf(str, "\n");
}

void printDoubleLines() {
    local string str = "================================================%s";
    Printf(str, spacer);
    Printf(str, "\n");
}

void printFiltersHeader() {
    local string str = "Type    \tQ Factor\t Frequency\t       Gain %s";
    Printf(str, spacer);
    Printf(str, "\n");
}


byte Signalflow <bgcolor=cDkGreen, read=getSignalflow>;
EQ ToneControls[5];
ubyte Subwoofer_maxGain <bgcolor=cLtYellow>; // subwoofer gain ???
EQ2 LoudnessLow;
EQ2 LoudnessHigh;
struct {
    ubyte value[19] <bgcolor=cGray>;
} GALA[7];
EQ2 VirtualSubwoofer;
EQ2 GADK;
CarEQ Profile1[6] <optimize=true>;
CarEQ Profile2[6] <optimize=true>;

// one of those bytes is "Limiter MaxTHD" [0 .. 70]
struct {
    byte unknown[6] <bgcolor=cPurple>;
    byte MaxTHD <bgcolor=cBlue>;
} Limiters; // Warmth ??? potentially

struct {
    ubyte attackTime <bgcolor=cDkGreen>;
    ushort releaseTime <bgcolor=cGreen>;
    ubyte threshold <bgcolor=cLtGreen>;
    ubyte holdTime <bgcolor=cAqua>;
} DRC[6];

FSeek(FileSize() - 4);

struct {
    char major <bgcolor=cDkBlue>;
    char minor <bgcolor=cDkBlue>;
} DatasetVersion;
ushort checksum <bgcolor=cDkRed>;

////////////////////////
/// PARSING FINISHED ///
////////////////////////

local int i = 0;
local int j = 0;
local int k = 0;

Printf("\nSIGNAL FLOW: %s\n", getSignalflow(Signalflow));

Printf("\nEQ TONE CONTROLS");
Printf("\nBand     \tType     \tQ Factor\tFrequency\t  MaxGain\tGainOffset\n");
Printf("=======================================================================\n");
Printf("Subwoofer                        \t            %7.2fdB\n", calcMaxGain(Subwoofer_maxGain));
for (i = 0; i < 5; i++) {
    Printf("%-8s\t%-13s%7.1f\t %6gHz\t%7.2fdB\t%10.2f\n",
        getEQBand(i),
        getFilterType(ToneControls[i].type),
        calcQuality(ToneControls[i].quality),
        ToneControls[i].frequency,
        calcMaxGain(ToneControls[i].maxGain),
        ToneControls[i].gainOffset / 12);
}
Printf("=======================================================================\n");


printEQ2(LoudnessLow, "LOUDNESS - Bass Boost");
printEQ2(LoudnessHigh, "LOUDNESS - Treble Boost");
printEQ2(VirtualSubwoofer, "VIRTUAL SUBWOOFER");
printEQ2(GADK, "GADK (3D SURROUND SOUND EFFECT)");

Printf("\nGALA (SPEED-DEPENDENT VOLUME CONTROL)");
Printf("\nLevel   \t Gain\n");
Printf("==========================================");
Printf("==========================================");
Printf("==========================================\n");
for ( i = 0; i < 7; i++ ) {
    Printf("%-8i\t", i+1);
    for ( j = 0; j < 19; j++ ) {
        Printf("%5.2f ", calcAbsGain(GALA[i].value[j]));
    }
    Printf("\n");
};
Printf("==========================================");
Printf("==========================================");
Printf("==========================================\n");

Printf("\n");

printProfileName(1);
printProfileName(2);
for (i = 0; i < 6; i++) {
    printChannelHeader(Profile1, i, 1);
    printChannelHeader(Profile2, i, 2);
    printLines();
    printFiltersHeader();
    printDoubleLines();
    printEQFilter(Profile1[i].Filter1, 1);
    printEQFilter(Profile2[i].Filter1, 2);
    printEQFilter(Profile1[i].Filter2, 1);
    printEQFilter(Profile2[i].Filter2, 2);
    printEQFilter(Profile1[i].Filter3, 1);
    printEQFilter(Profile2[i].Filter3, 2);
    printEQFilter(Profile1[i].Filter4, 1);
    printEQFilter(Profile2[i].Filter4, 2);
    printEQFilter(Profile1[i].Filter5, 1);
    printEQFilter(Profile2[i].Filter5, 2);
    printEQFilter(Profile1[i].Filter6, 1);
    printEQFilter(Profile2[i].Filter6, 2);
    printEQFilter(Profile1[i].Filter7, 1);
    printEQFilter(Profile2[i].Filter7, 2);
    printDoubleLines();
    Printf("\n");
}

Printf("LIMITERS\n");
Printf("\t\t\t      THD\n");
Printf("----------------------------------------------\n");
for (i = 0; i < 6; i++) {
    Printf("%3i    ", Limiters.unknown[i]);
}
Printf("%3i", Limiters.MaxTHD);
Printf("\n\n");

Printf("DYNAMIC RANGE COMPRESSION\n");
Printf("Channel     Threshold   Attack    Hold   Release\n");
Printf("================================================\n");
for (i = 0; i < 6; i++) {
    Printf("%s   %5.1fdB  %5.1fms  %5.1fms   %4gms\n",
        getChannelName(i, Signalflow),
        DRC[i].threshold / -20,         // [-20 .. 0 ]
        (float) DRC[i].attackTime / 20, // [0.5 .. 10]
        (float) DRC[i].holdTime / 20,   // [0.5 .. 10]
        DRC[i].releaseTime              // [5 .. 2000]
    );
}
Printf("================================================");

local ushort file_checksum = Checksum(CHECKSUM_CRCCCITT, 0, FileSize() - 2, -1, -1); // algo, size, length, poly, init
Printf("\n\nFILE CHECKSUM: %.04X", file_checksum);
